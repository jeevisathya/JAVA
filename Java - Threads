class A extends Thread{
    public void run(){
        
        for(int i=0; i<3; i++){
            System.out.println("hi");
            Thread.sleep(millis: 10); // allowing to pause the thread for particular timing
        }
    }
}
class B extends Thread{
    public void run(){
        
        for(int i=0; i<3; i++){
            System.out.println("hello");
        }
    }
}
public class MyClass {
  public static void main(String args[]) {
      A obj = new A();
      B obj1= new B();
      obj.start();
      obj1.start();
  }
}
By using Runnable:


Runnable obj=   new A();
Runnable obj1 = new B();

Thread t1 = new Thread(obj);
Thread t2 = new Thread(obj1);

t1.start();
t2.start();

Synchronization:

class A{
    int count;
    public void countvalue(){
        
        count=count+1;
    }
}
public class MyClass {
  public static void main(String args[]) {
      A obj = new A();
      
      Thread t1 = new Thread(new Runnable ()
       {
      
      public void run(){                      // use to have synchronized keyword like public synchronized void run(){}
          for(int i=0; i<50; i++){
              obj.countvalue();
              System.out.println(obj.count);
          }
      )};
      
        Thread t2 = new Thread(new Runnable ()
       {
      
      public void run(){
          for(int i=0; i<50; i++){
              obj.countvalue();
              System.out.println(obj.count);
          }
      )};
      
      t1.start();
      t2.start();  // 2 threads calling same method/class/variable for altering
  }
}
